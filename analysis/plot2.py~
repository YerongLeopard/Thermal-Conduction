import pylab as pl
import matplotlib.pyplot as plt
import scipy as sp
import numpy as np
import scipy.optimize as optimization
fig = plt.figure()
pl.rc('axes', linewidth=1.2)
text6='6by6real.dat'
text4='4by4.dat'
text3='3by3.dat'
text2='2by2.dat'
def func(x,a,b,c): 
 return (a+b*x+c*x**2) 
 
def func1(x,a,b,c): 
 return (a/x+b+c*x) 
##################################
def func2(x,a,b,c,d,e,f): 
 return (a+b*x+c*x**2+d*x**3+e*x**4+f*x**5) 

def func3(x,a,b,c,d,e,f): 
 return (a/x+b+c*x+d*x**2+e*x**3+f*x**4) 
axes1 = fig.add_axes([0.12, 0.14, 0.8, 0.8]) # main axes
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
axes1.xaxis.set_tick_params(size=14,width=1.2)
axes1.yaxis.set_tick_params(size=14,width=1.2)
axes2 = fig.add_axes([0.45, 0.5, 0.4, 0.35],xticks=np.arange(0.0,0.2+0.05,0.05),xlim=[0.0,0.2],ylim=[0.0,0.2]) # inset axes
plt.yticks(fontsize = 12)
plt.xticks(fontsize = 12)
# main figure
w=0.5
line=pl.loadtxt(text6)
q=[]
y=[]
for l in line[:]:
  q.append(2*sp.pi/l[0])
  y.append((l[1]))#30.4962234594))
x=[]
for q0 in q:
     x.append(q0**w)
axes1.plot(x,y,'r-',linewidth=2,label='$6\\times 6$')

line=pl.loadtxt(text4)
q=[]
y=[]
for l in line[:]:
  q.append(2*sp.pi/l[0])
  y.append((l[1]))#30.4962234594))
x=[]
for q0 in q:
     x.append(q0**w)
axes1.plot(x,y,'b-',linewidth=2,label='$4\\times 4$')

line=pl.loadtxt(text3)
q=[]
y=[]
for l in line[:]:
  q.append(2*sp.pi/l[0])
  y.append((l[1]))#30.4962234594))
x=[]
for q0 in q:
     x.append(q0**w)
axes1.plot(x,y,'y-',linewidth=2,label='$3\\times 3$')

line=pl.loadtxt(text2)
q=[]
y=[]
for l in line[:]:
  q.append(2*sp.pi/l[0])
  y.append((l[1]))#30.4962234594))
x=[]
for q0 in q:
     x.append(q0**w)
axes1.plot(x,y,'g-',linewidth=2,label='$2\\times 2$')
#axes1.legend(loc='center left')
axes1.set_xlabel('$\sqrt{qa}$',fontsize=30)
axes1.set_ylabel('$\kappa(q)/\kappa_{0}$',fontsize=25)
#axes1.set_title('title')

# insert ##########################################################################################33

w=0.5
line=pl.loadtxt(text6)
q=[]
y=[]
for l in line[:]:
  q.append(2*sp.pi/l[0])
  y.append((l[1])*np.sqrt(2*sp.pi/l[0]))#30.4962234594))
x=[]
for q0 in q:
     x.append(q0**w)
axes2.plot(x,y,'r-',linewidth=2)

x=np.array(x)
y=np.array(y)
x0=np.array([0.0,0.0,0.0])
#x0=np.array([0.0,0.0,0.0,0.0])
#x0=np.array([0.0,0.0,0.0,0.0,0.0,0.0])
x=x[10:]
y=y[10:]
para,corv=optimization.curve_fit(func,x,y,x0)
print para
#x=x[10:]
#axes1.plot(x,func3(x,para[0],para[1],para[2],para[3],para[4],para[5]),'k--',markersize=1)
axes1.plot(x,func1(x,para[0],para[1],para[2]),'k--',markersize=1)

#print para[5]/para[4]

line=pl.loadtxt(text4)
q=[]
y=[]
for l in line[:]:
  q.append(2*sp.pi/l[0])
  y.append((l[1])*np.sqrt(2*sp.pi/l[0]))#30.4962234594))
x=[]
for q0 in q:
     x.append(q0**w)
axes2.plot(x,y,'b-',linewidth=2)

x=np.array(x)
y=np.array(y)
x0=np.array([0.0,0.0,0.0])
#x0=np.array([0.0,0.0,0.0,0.0])
#x0=np.array([0.0,0.0,0.0,0.0,0.0,0.0])
x=x[5:]
y=y[5:]
para,corv=optimization.curve_fit(func,x,y,x0)
print para
axes1.plot(x,func1(x,para[0],para[1],para[2]),'k--',markersize=1)
#axes1.plot(x,func1(x,para[0],para[1],para[2],para[3]),'k--',markersize=1)

line=pl.loadtxt(text3)
q=[]
y=[]
for l in line[:]:
  q.append(2*sp.pi/l[0])
  y.append((l[1])*np.sqrt(2*sp.pi/l[0]))#30.4962234594))
x=[]
for q0 in q:
     x.append(q0**w)
axes2.plot(x,y,'y-',linewidth=2)

x=np.array(x)
y=np.array(y)
x0=np.array([0.0,0.0,0.0])
#x0=np.array([0.0,0.0,0.0,0.0])
x=x[5:]
y=y[5:]
para,corv=optimization.curve_fit(func,x,y,x0)
print para
axes1.plot(x,func1(x,para[0],para[1],para[2]),'k--',markersize=1)
#axes1.plot(x,func1(x,para[0],para[1],para[2],para[3]),'k--',markersize=4)

line=pl.loadtxt(text2)
q=[]
y=[]
for l in line[:]:
  q.append(2*sp.pi/l[0])
  y.append((l[1])*np.sqrt(2*sp.pi/l[0]))#30.4962234594))
x=[]
for q0 in q:
     x.append(q0**w)
axes2.plot(x,y,'g-',linewidth=2)
x=np.array(x)
y=np.array(y)
x0=np.array([0.0,0.0,0.0])
#x0=np.array([0.0,0.0,0.0,0.0])
x=x[5:]
y=y[5:]
para,corv=optimization.curve_fit(func,x,y,x0)
print para
axes1.plot(x,func1(x,para[0],para[1],para[2]),'k--',markersize=1)

axes2.grid(True)
axes2.set_xlabel('$\sqrt{qa}$',fontsize=20)
axes2.set_ylabel('$\kappa(q)\sqrt{qa}/\kappa_{0}$',fontsize=20)
#axes1.plot(x,func1(x,para[0],para[1],para[2],para[3]),'k.',markersize=4)
#axes1.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,ncol=2, mode="expand", borderaxespad=0.)
axes1.legend(loc='lower right',fontsize=15)
plt.show()
